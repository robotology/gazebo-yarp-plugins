name: C++ CI Workflow with conda dependencies

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge,robotology
        channel-priority: true

    - uses: rlespinasse/github-slug-action@v3.x

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge -c robotology yarp gazebo 

    # Additional dependencies useful only on Linux
    - name: Dependencies [Conda/Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        mamba install expat-cos7-x86_64 libselinux-cos7-x86_64 libxau-cos7-x86_64 libxcb-cos7-x86_64 libxdamage-cos7-x86_64 libxext-cos7-x86_64 libxfixes-cos7-x86_64 libxxf86vm-cos7-x86_64 mesa-libgl-devel-cos7-x86_64 libxshmfence-cos7-x86_64 libxshmfence-devel-cos7-x86_64

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 2019" -DBUILD_TESTING:BOOL=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    # Tests are working only on Linux
    # https://github.com/robotology/gazebo-yarp-plugins/issues/530
    # https://github.com/robotology/gazebo-yarp-plugins/issues/567
    - name: Test [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

